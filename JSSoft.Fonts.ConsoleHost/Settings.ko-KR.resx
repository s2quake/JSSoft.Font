<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Settings.Characters" xml:space="preserve">
    <value>출력할 문자의 유니코드를 나타냅니다.
10진수 또는 16진수 형태로 표현되며 각 문자는 ',' 로 구분짓습니다.
'-' 을 사용하여 여러개의 문자를 지정할 수 있습니다.
예) "65, 0x41, 66-90, 0x61-0x7A"

값이 지정되지 않으면 모든 문자를 출력합니다.</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>지정된 글꼴에서 문자정보와 텍스쳐를 생성합니다.</value>
  </data>
  <data name="Settings.DPI" xml:space="preserve">
    <value>글꼴의 DPI를 나타냅니다. 기본값은 72입니다.</value>
  </data>
  <data name="Settings.Face" xml:space="preserve">
    <value>글꼴의 종류를 나타냅니다.  기본값은 0입니다.</value>
  </data>
  <data name="Settings.FontPath" xml:space="preserve">
    <value>글꼴 경로를 나타냅니다.</value>
  </data>
  <data name="Settings.OutputPath" xml:space="preserve">
    <value>출력 경로를 나타냅니다.
출력 경로가 지정되지 않으면 폰트의 정보가 출력됩니다.

출력 경로가 디렉터리일 경우 파일명은 폰트 이름에 따라 자동으로 지정됩니다.</value>
  </data>
  <data name="Settings.Padding" xml:space="preserve">
    <value>문자의 여백을 나타냅니다. 
좌우상하의 값을 설정할 수 있습니다. 기본값은 1입니다.
예1) --padding 1 은 모든 여백을 1로 설정합니다.
예2) --padding "1, 2" 은 좌우측 여백을 1 상하측 여백은 2로 설정합니다.
예3) --padding "1 1 0 0" 은 좌측은 1, 상측은 1, 우측은 0, 하측을 0으로 설정합니다.</value>
  </data>
  <data name="Settings.Size" xml:space="preserve">
    <value>글꼴의 크기를 나타냅니다. 기본값은 26입니다.</value>
  </data>
  <data name="Settings.Spacing" xml:space="preserve">
    <value>문자와 문자의 간격을 나타냅니다. 
수평과 수직값을 설정할 수 있습니다. 기본값은 1입니다.
예1) --spacing 1 은 수평과 수직 간격을 1로 설정합니다.
예2) --spacing "1 0" 은 수평 간격만 1로 설정합니다.</value>
  </data>
  <data name="Settings.TextureHeight" xml:space="preserve">
    <value>출력할 텍스쳐의 높이를 나타냅니다. 기본값은 512입니다.</value>
  </data>
  <data name="Settings.TextureWidth" xml:space="preserve">
    <value>출력할 텍스쳐의 너비를 나타냅니다. 기본값은 512입니다.</value>
  </data>
</root>