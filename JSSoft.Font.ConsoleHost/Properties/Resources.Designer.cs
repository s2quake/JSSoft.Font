//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JSSoft.Font.ConsoleHost.Properties {
    using System;
    
    
    /// <summary>
    ///   지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
    /// </summary>
    // 이 클래스는 ResGen 또는 Visual Studio와 같은 도구를 통해 StronglyTypedResourceBuilder
    // 클래스에서 자동으로 생성되었습니다.
    // 멤버를 추가하거나 제거하려면 .ResX 파일을 편집한 다음 /str 옵션을 사용하여 ResGen을
    // 다시 실행하거나 VS 프로젝트를 다시 빌드하십시오.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JSSoft.Font.ConsoleHost.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
        ///   재정의합니다.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Indicates the Unicode of the character you want to print.
        ///expressed in decimal or hexadecimal form, each character is separated by &apos;,&apos;
        ///You can use &apos;-&apos; to specify multiple characters.
        ///e.g. &quot;65, 0x41, 66-90, 0x61-0x7A&quot;과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string Characters {
            get {
                return ResourceManager.GetString("Characters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Creates textures and information from the specified font.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string ctor {
            get {
                return ResourceManager.GetString("ctor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the DPI of the font. The default value is 72.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string DPI {
            get {
                return ResourceManager.GetString("DPI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the type of font. The default value is 0.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string Face {
            get {
                return ResourceManager.GetString("Face", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the font path.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string FontPath {
            get {
                return ResourceManager.GetString("FontPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the output file. Texture files are created based on the output file name of the output directory.
        ///When the output file is output.xml, the texture is created as output_0.png, output_1.png.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string OutputPath {
            get {
                return ResourceManager.GetString("OutputPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the padding of the character. You can set the value for both sides. The default value is 1.
        ///e.g. 1) --padding 1 sets all padding to 1.
        ///e.g. 2) --padding &quot;1, 2&quot; sets the left and right padding to 1 and the top and bottom padding to 2.
        ///e.g. 3) --padding &quot;1 1 0 0&quot; sets left to 1, top to right to 0 and bottom to 0.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string Padding {
            get {
                return ResourceManager.GetString("Padding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the size of the font. The default value is 14.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string Size {
            get {
                return ResourceManager.GetString("Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the gap between the character and characters. You can set horizontal and vertical values. The default value is 1.
        ///e.g. 1) --spacing 1 sets the horizontal and vertical spacing to 1.
        ///e.g. 2) --spacing &quot;1 0&quot; sets only the horizontal interval to 1.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string Spacing {
            get {
                return ResourceManager.GetString("Spacing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the height of the texture to be output. The default value is 512.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string TextureHeight {
            get {
                return ResourceManager.GetString("TextureHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Indicates the width of the texture to be printed. The default value is 512.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string TextureWidth {
            get {
                return ResourceManager.GetString("TextureWidth", resourceCulture);
            }
        }
    }
}
